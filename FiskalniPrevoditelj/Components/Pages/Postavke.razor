
@page "/settings"

@using Microsoft.FluentUI.AspNetCore.Components
@using System.Diagnostics
@inject NavigationManager Navigation
@inject EsirDriver.FiskalPrevoditeljToEsir _engin
@inject IToastService _toastService
@inject Servisi.ConfigSaveServis _configServis;
@inject IDialogService _dialogService;
@inject Servisi.StartupServis _startupServis;

<FluentToolbar id="toolbar-fluent-components">
    <FluentButton OnClick="@onClick" Appearance="Appearance.Accent">Spasi postavke</FluentButton>
</FluentToolbar>
<FluentStack Orientation="Orientation.Horizontal" Width="100%" HorizontalAlignment="HorizontalAlignment.Center">
<FluentBodyContent >
        <h3>Postavke prevoditalja</h3>
        <FluentTextField Style="width: 100%;" @bind-Value="prevoditeljSettingModel.PathInputFiles" Label="Čitamo HCP datoeke iz folrear (to_fp)"></FluentTextField>
        <FluentTextField Style="width: 100%;" @bind-Value="prevoditeljSettingModel.PathOutputFiles" Label="Odgovaramo HCP datoeke u folder (from_fp)"></FluentTextField>
        <FluentNumberField Style="width: 100%;" @bind-Value="prevoditeljSettingModel.ReadFolderEvryMiliSec" Min="100" Label="Čitaj folder svakih milisekunid "></FluentNumberField>
        <FluentTextField Style="width: 100%;" @bind-Value="prevoditeljSettingModel.DefSklSifra" Label=" Podrazumjevana šifrra skaldišat"></FluentTextField>
        
        <FluentDivider Style="width:100%;" Role="DividerRole.Presentation"></FluentDivider>
    
    <br />
        <h3>Postavke fiskalnog printera</h3>
        <FluentSelect Width="500px"
                      Height="250px"
                      TOption="string"
                      Items="@operationModeItems"
                      Label="Način rada"
                      Multiple="false"
                      @bind-Value="odabraniModelRada">
        </FluentSelect>
        <FluentNumberField Step="1" Min="1"  @bind-Value="esirConfigModel.TimeoutInSec" Label="HTTP request time out in sec"></FluentNumberField>
        <FluentTextField Style="width: 100%;" @bind-Value="esirConfigModel.apiKey" Label="Api ključ"></FluentTextField>
        <FluentTextField Style="width: 100%;"  @bind-Value="esirConfigModel.webserverAddress" Label="Web adresa EISR api-a"></FluentTextField>
        <FluentNumberField Style="width: 100%;" @bind-Value="esirConfigModel.pin" Label="Pin uređaja"></FluentNumberField>
        
        <br />
        <FluentCheckbox @bind-Value="@prevoditeljSettingModel.Enabled" Label="Upaljen" />
        <br />
        <FluentCheckbox @bind-Value="IsStartupEnabled" Label="Pokreni aplikciju prilikom paljenja Windows OS-a" />
        <br />
        
    </FluentBodyContent>
</FluentStack>


@code {

    private FluentMenuButton operationModeButton = new();
    string odabraniModelRada;
    private Dictionary<string, string> opreatinmModeTypes;
    private EsirDriver.Modeli.EsirConfigModel esirConfigModel { get; set; } = new EsirDriver.Modeli.EsirConfigModel();
    private EsirDriver.Modeli.PrevoditeljSettingModel prevoditeljSettingModel { get; set; } = new EsirDriver.Modeli.PrevoditeljSettingModel();
    //private Modeli.AppPostavkeModel appPostavke { get; set; } = new Modeli.AppPostavkeModel();
    private bool isStartupEnabled;
    private bool IsStartupEnabled
    {
        get => isStartupEnabled;
        set
        {
            if (isStartupEnabled != value)
            {
                isStartupEnabled = value;
                UpdateStartupSetting();
            }
        }
    }
    private List<string> operationModeItems = new List<string>()
    {
        EsirDriver.Modeli.esir.InvoiceType.Normal.ToString(),
        EsirDriver.Modeli.esir.InvoiceType.Advance.ToString(),
        EsirDriver.Modeli.esir.InvoiceType.Copy.ToString(),
        EsirDriver.Modeli.esir.InvoiceType.Proforma.ToString(),
        EsirDriver.Modeli.esir.InvoiceType.Training.ToString()
    };


    private void UpdateStartupSetting()
    {
        if (isStartupEnabled)
        {
            _startupServis.AddApplicationToStartup();
        }
        else
        {
            _startupServis.RemoveApplicationFromStartup();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isStartupEnabled = _startupServis.IsApplicationInStartup();
            esirConfigModel = await _configServis.GetEsirConfg();
            prevoditeljSettingModel = await _configServis.GetPrevoditeljConfg();

            odabraniModelRada = esirConfigModel.OperationMode.ToString();

            //appPostavke = await _configServis.GetAppConfig();
            var exe = _startupServis.GetExecutablePath();
            Console.WriteLine(exe);
        }
        catch(Exception ex)
        {
            _toastService.ShowToast(ToastIntent.Warning, $"Greška u učitavnju postavki ex {ex.Message}");
        }


    }




    async private void onClick()
    {





        try
        {
            EsirDriver.Modeli.esir.InvoiceType invoiceType = EsirDriver.Modeli.esir.InvoiceType.Normal;

            Enum.TryParse(odabraniModelRada, true, out invoiceType);

            esirConfigModel.OperationMode = invoiceType;


            var configEsirSave = await _configServis.SetEsirConfg(esirConfigModel);
            _toastService.ShowToast(configEsirSave.Valid ? ToastIntent.Success : ToastIntent.Error, configEsirSave.Msg);

            var configPrevoditeljSave = await _configServis.SetPrevoditeljConfg(prevoditeljSettingModel);
            _toastService.ShowToast(configPrevoditeljSave.Valid ? ToastIntent.Success : ToastIntent.Error, configPrevoditeljSave.Msg);

            //var configAppSave = await _configServis.SetAppConfig(appPostavke);
            //_toastService.ShowToast(configAppSave.Valid ? ToastIntent.Success : ToastIntent.Error, configAppSave.Msg);


            var configSaveMsg = await _engin.Konfigurisi(esirConfigModel, prevoditeljSettingModel);
            if (configSaveMsg.LogLevel >= EsirDriver.Modeli.LogLevel.Warning)
            {
                await _dialogService.ShowWarningAsync(configSaveMsg.Poruka, "Proglem prilikom konfiguracije");

            }
            else
            {
                _toastService.ShowInfo(configSaveMsg.Poruka);
            }



        }
        catch (Exception ex)
        {
            // Handle any exceptions
            Console.WriteLine($"Error saving data: {ex.Message}");
            var message = $"Greška u spašavaanju postavki ex:{ex.Message}";
            _toastService.ShowToast(ToastIntent.Error, message);
        }
      
    }
    }