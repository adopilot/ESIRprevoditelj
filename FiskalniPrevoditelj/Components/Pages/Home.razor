@page "/"
@using Microsoft.FluentUI.AspNetCore.Components
@using System.Diagnostics
@using EsirDriver.Modeli
@using Velopack
@inject NavigationManager Navigation
@inject EsirDriver.FiskalPrevoditeljToEsir _engin
@inject IToastService _toastService
@inject Servisi.ConfigSaveServis _configServis
@inject IDialogService _dialogService
@inject Servisi.StateServis _statueServis;

<style>

</style>
<FluentToolbar id="toolbar-fluent-components">
    <FluentButton Appearance="Appearance.Accent" OnClick="()=>_engin.Start()">Pokreni servis</FluentButton>
    <FluentButton Appearance="Appearance.Stealth" OnClick="()=>_engin.Stop()">Zaustavi server</FluentButton>
    <FluentButton Appearance="Appearance.Stealth" OnClick="()=>_engin.Konfigurisi(esirConfigModel,prevoditeljSettingModel)">Rekonfiguriši</FluentButton>
    
    <FluentMenuButton @ref=menubutton Text=@($"Log level {@logLevel.ToString()}") Items="@logLevelItems" OnMenuChanged="HandleOnMenuChanged"></FluentMenuButton>
    @*
    <FluentButton Appearance="Appearance.Stealth" OnClick="()=>ZadnjiRacun()">Zadnji račun</FluentButton>
    *@
</FluentToolbar>
<FluentDataGrid Items="@data" @ref="gridPoruka">
    <PropertyColumn Property="@(p => p.Poruka)"  Sortable="true" />
    <PropertyColumn Property="@(p => p.LogLevel)"   Width="150px" Sortable="true" />
    
</FluentDataGrid>



@code {
    //private string verzija { get; set; } = "4.1.1";

    private Dictionary<string, string> logLevelItems;
    private EsirDriver.Modeli.EsirConfigModel esirConfigModel { get; set; } = new EsirDriver.Modeli.EsirConfigModel();
    private EsirDriver.Modeli.PrevoditeljSettingModel prevoditeljSettingModel { get; set; } = new EsirDriver.Modeli.PrevoditeljSettingModel();
    private LogLevel logLevel { get; set; } = LogLevel.Debug;
    private Servisi.SlidingBuffer<PorukaFiskalnogPrintera> buferListe = new Servisi.SlidingBuffer<PorukaFiskalnogPrintera>(20);
    FluentDataGrid<PorukaFiskalnogPrintera> gridPoruka;

    public IQueryable<PorukaFiskalnogPrintera> data
    {

        get { return buferListe.Reverse().AsQueryable<PorukaFiskalnogPrintera>(); }
    }




    private async Task UpdateMyApp()
    {

        try
        {
            if (_statueServis.FirstRun)
            {
                _statueServis.FirstRun = false;
                var mgr = new UpdateManager("https://driver.pf.robot.ba/");



                // check for new version
                var newVersion = await mgr.CheckForUpdatesAsync();
                if (newVersion == null)
                {

                    return; // no update available
                }

                _toastService.ShowInfo($"Našli smo novu verziu app {(newVersion?.BaseRelease?.Version.Release ?? "x.x.x")} istu pokušavamo preuzeti");

                // download new version
                await mgr.DownloadUpdatesAsync(newVersion);

                _toastService.ShowInfo($"Instalriamo novu verziju aplikcije molimo vas za stpljenje {(newVersion?.TargetFullRelease?.Version.Release ?? "x.x.x")}");
                // install new version and restart app
                mgr.ApplyUpdatesAndRestart(newVersion);
            }
        }
        catch (Exception ex)
        {
            _toastService.ShowWarning($"Nismo se uspijeli ažuriari sa greškom:{ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string verzija = "4.4.1";
            _toastService.ShowInfo($"App upaljena sa verzijom {verzija} ");
            await UpdateMyApp();
            logLevelItems = GetLogLevels();
            _engin.MessageReceived += Servis_MessageReceived;
            buferListe.Add(new PorukaFiskalnogPrintera(){ IsError=false, MozeNastaviti=true, LogLevel= LogLevel.Debug, Poruka=$"Upalio smo app na ver {verzija} "});
            esirConfigModel = await _configServis.GetEsirConfg();
            prevoditeljSettingModel = await _configServis.GetPrevoditeljConfg();
            await _engin.Konfigurisi(esirConfigModel, prevoditeljSettingModel);

        }
        catch (Exception ex)
        {
            _toastService.ShowError($"Greška u inicijalizaiji sa ex:{ex.Message}");

        }


    }
    public async void Servis_MessageReceived(object? sender, EsirDriver.Modeli.PorukaFiskalnogPrintera e)
    {
        if (e != null && e.LogLevel >= logLevel )
        {
            buferListe.Add(e);
            await gridPoruka.RefreshDataAsync();
        }
    }

    private async Task ZadnjiRacun()
    {
        var racun = await _engin._esir.LastInvoice(false,EsirDriver.Modeli.esir.ReceiptLayoutType.Invoice, EsirDriver.Modeli.esir.ReceptImageFormat.Pdf, true);

        if (!(racun?.messages??"").Contains("Успешно"))
        {
            await _dialogService.ShowErrorAsync($"Nismo dobili zanji račun ESIRa sa porukamam {(racun?.messages ?? "")}");
            return;
        }
        var secondWindow = new Window()
            {
                Page = new NewPage1(racun.invoiceImagePdfBase64)
            };


        Application.Current.OpenWindow(secondWindow);
        
        Console.WriteLine(racun?.tin??"tin");
    }

    
    private async void SpasiSettingsZaEnable(bool args)
    {
        prevoditeljSettingModel.Enabled = args;
        await _configServis.SetPrevoditeljConfg(prevoditeljSettingModel);
    }

    private void HandleOnMenuChanged(MenuChangeEventArgs args)
    {


        if (Enum.TryParse(args.Value, out LogLevel ado))
        {
            logLevel = ado;
        }

    }


    private FluentMenuButton menubutton = new();

    
    private  Dictionary<string, string> GetLogLevels()
    {
        var logLevelDictionary = new Dictionary<string, string>();

        foreach (LogLevel logLevel in Enum.GetValues(typeof(LogLevel)))
        {
            logLevelDictionary[((int)logLevel).ToString()] = logLevel.ToString();
        }

        return logLevelDictionary;
    }


    protected override void OnInitialized()
    {
        
    }
    
}