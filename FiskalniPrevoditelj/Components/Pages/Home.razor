@page "/"
@using Microsoft.FluentUI.AspNetCore.Components
@using System.Diagnostics
@using EsirDriver.Modeli
@using Velopack
@inject NavigationManager Navigation
@inject EsirDriver.FiskalPrevoditeljToEsir _engin
@inject IToastService _toastService
@inject Servisi.ConfigSaveServis _configServis
@inject IDialogService _dialogService


<style>

</style>
<FluentToolbar id="toolbar-fluent-components">
    <FluentButton Appearance="Appearance.Accent" OnClick="()=>_engin.Start()">Pokreni servis</FluentButton>
    <FluentButton Appearance="Appearance.Stealth" OnClick="()=>_engin.Stop()">Zaustavi server</FluentButton>
    <FluentButton Appearance="Appearance.Stealth" OnClick="()=>_engin.Konfigurisi(esirConfigModel,prevoditeljSettingModel)">Rekonfiguriši</FluentButton>
    
    <FluentMenuButton @ref=menubutton Text=@($"Log level {@logLevel.ToString()}") Items="@logLevelItems" OnMenuChanged="HandleOnMenuChanged"></FluentMenuButton>
    
</FluentToolbar>
<FluentDataGrid Items="@data" @ref="gridPoruka">
    <PropertyColumn Property="@(p => p.Poruka)"  Sortable="true" />
    <PropertyColumn Property="@(p => p.LogLevel)"   Width="150px" Sortable="true" />
    
</FluentDataGrid>



@code {
    private Dictionary<string, string> logLevelItems;

    private EsirDriver.Modeli.EsirConfigModel esirConfigModel { get; set; } = new EsirDriver.Modeli.EsirConfigModel();
    private EsirDriver.Modeli.PrevoditeljSettingModel prevoditeljSettingModel { get; set; } = new EsirDriver.Modeli.PrevoditeljSettingModel();
    private LogLevel logLevel { get; set; } = LogLevel.Debug;

    FluentDataGrid<PorukaFiskalnogPrintera> gridPoruka;
    //private List<PorukaFiskalnogPrintera> poruke = new List<PorukaFiskalnogPrintera>() { new PorukaFiskalnogPrintera() { MozeNastaviti=true, LogLevel= LogLevel.Information, Poruka="Upalio sam se" } };
    public IQueryable<PorukaFiskalnogPrintera> data
    {

        get { return buferListe.Reverse().AsQueryable<PorukaFiskalnogPrintera>(); }
    }

    private Servisi.SlidingBuffer<PorukaFiskalnogPrintera> buferListe = new Servisi.SlidingBuffer<PorukaFiskalnogPrintera>(20);

    private async Task UpdateMyApp()
    {

        try
        {
            var mgr = new UpdateManager("https://driver.pf.robot.ba/");

            // check for new version
            var newVersion = await mgr.CheckForUpdatesAsync();
            if (newVersion == null)
                return; // no update available



            // download new version
            await mgr.DownloadUpdatesAsync(newVersion);

            // install new version and restart app
            mgr.ApplyUpdatesAndRestart(newVersion);

        }
        catch (Exception ex)
        {
            _toastService.ShowWarning($"Nismo se uspijeli ažuriari sa greško:{ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _toastService.ShowInfo("App upaljena sa verziihjm 4.0.8");
            await UpdateMyApp();
            logLevelItems = GetLogLevels();
            _engin.MessageReceived += Servis_MessageReceived;
            buferListe.Add(new PorukaFiskalnogPrintera(){ IsError=false, MozeNastaviti=true, LogLevel= LogLevel.Debug, Poruka="Upalio smo app na ver 4.0.8"});
            esirConfigModel = await _configServis.GetEsirConfg();
            prevoditeljSettingModel = await _configServis.GetPrevoditeljConfg();
            await _engin.Konfigurisi(esirConfigModel, prevoditeljSettingModel);






        }
        catch (Exception ex)
        {

        }


    }
    public async void Servis_MessageReceived(object? sender, EsirDriver.Modeli.PorukaFiskalnogPrintera e)
    {
        if (e != null && e.LogLevel >= logLevel )
        {
            buferListe.Add(e);
            await gridPoruka.RefreshDataAsync();
        }
    }


    string? comboboxValue;
    FluentToolbar? Toolbar;
    string? value1 = "one", value2 = "two", value3;
    bool check1;
    string? text1;

    int counter = 1;
    private async void SpasiSettingsZaEnable(bool args)
    {
        prevoditeljSettingModel.Enabled = args;
        await _configServis.SetPrevoditeljConfg(prevoditeljSettingModel);
    }

    private void HandleOnMenuChanged(MenuChangeEventArgs args)
    {


        if (Enum.TryParse(args.Value, out LogLevel ado))
        {
            logLevel = ado;
        }

    }


    private FluentMenuButton menubutton = new();

    
    private  Dictionary<string, string> GetLogLevels()
    {
        var logLevelDictionary = new Dictionary<string, string>();

        foreach (LogLevel logLevel in Enum.GetValues(typeof(LogLevel)))
        {
            logLevelDictionary[((int)logLevel).ToString()] = logLevel.ToString();
        }

        return logLevelDictionary;
    }


    protected override void OnInitialized()
    {
        
    }
    private void Klik()
    {
        Random rnd = new();

        var intent = Enum.GetValues<ToastIntent>()[rnd.Next(10)];
        var message = $"Simple Toast #{counter++}";
        _toastService.ShowToast(intent, message);
    }
}