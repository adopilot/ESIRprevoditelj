@page "/settings"
@using System.Diagnostics
@inject NavigationManager Navigation
@inject EsirDriver.FiskalPrevoditeljToEsir _engin
<FluentStack Orientation="Orientation.Vertical" Width="100%" HorizontalAlignment="HorizontalAlignment.Center">
<FluentBodyContent >
        <h3>Postavke kase</h3>
        <FluentCheckbox @bind-Value="@enabled" Label="U Upotrebi" />
        <FluentTextField @bind-Value=PathInputFiles Label="Prema folderu"></FluentTextField>
        <FluentTextField @bind-Value=PathOutputFiles Label="Iz foldera"></FluentTextField>
    <FluentDivider Style="width: 100%;" Role="DividerRole.Presentation"></FluentDivider><br />
        <h3>Postavke fiskalnog printera</h3>
        <FluentTextField @bind-Value=ApiKey Label="ApiKey"></FluentTextField>
        <FluentTextField @bind-Value=webserverAddress Label="Webserver Address"></FluentTextField>
        <br />
        <FluentButton OnClick="@onClick" Appearance="Appearance.Accent">Save</FluentButton>
    </FluentBodyContent>
</FluentStack>


@code {
    bool enabled = true;
    string? PathInputFiles;
    string? PathOutputFiles;
    string? ApiKey;
    string? webserverAddress;
    protected override async Task OnInitializedAsync()
    {
        string? value = await SecureStorage.Default.GetAsync("enabled"??"false");
        PathInputFiles =await SecureStorage.Default.GetAsync("enabled");
        PathOutputFiles = await SecureStorage.Default.GetAsync("PathOutputFiles");

        ApiKey = await SecureStorage.Default.GetAsync("ApiKey");
        webserverAddress = await SecureStorage.Default.GetAsync("webserverAddress");



    }


    async private void onClick()
    {
        try
        {
            // Saveto  the SecureStorage
            await SecureStorage.SetAsync("enabled", enabled.ToString());
            await SecureStorage.SetAsync("PathInputFiles", PathInputFiles!);
            await SecureStorage.SetAsync("PathOutputFiles", PathOutputFiles!);
            await SecureStorage.SetAsync("ApiKey", ApiKey!);
            await SecureStorage.SetAsync("webserverAddress", webserverAddress!);
        }
        catch (Exception ex)
        {
            // Handle any exceptions
            Console.WriteLine($"Error saving data: {ex.Message}");
        }
    }



  




/*   private async void IdiNa(){
        
      //  await _engin.Konfigurisi(new EsirDriver.Modeli.EsirConfigModel(){ apiKey="adaoda"}, new EsirDriver.Modeli.PrevoditeljSettingModel(){ PathInputFiles= $"c:\\ado\\{DateTime.Now.ToString("hh:mm:ss")}"});
        
    } */
}
