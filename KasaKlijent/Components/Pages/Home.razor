@page "/"
@using System.Diagnostics
@inject EsirDriver.FiskalPrevoditeljToEsir _engin


<h1>Dobro došli!</h1
    <FluentToolbar id="toolbar-fluent-components" Style="display:flex;">
    <FluentButton xs="6" Appearance="Appearance.Accent" OnClick="@startButtonCliced" Style="width: 200px;">  @if (serviceStarted)
    {
        <text>Stop</text>
    }
    else
    {
        <text>Start</text>
    }</FluentButton>
    <FluentSpacer />
<FluentSelect Items=@stringOptions1
               OptionText="@(i => i.Text)"
               OptionValue="@(i => i.Value)"
               OptionSelected="@(i => i.Selected)"
               @bind-Value="@logLevel" />

    </FluentToolbar>


<FluentGrid Spacing="3" OnBreakpointEnter="@OnBreakpointEnterHandler" AdaptiveRendering="true" Justify="JustifyContent.Center" Style="background-color: var(--neutral-layer-3); padding: 4px; ">
    <FluentGridItem xs="6" sm="3">
        <div class="card">
          
        </div>
    </FluentGridItem>
   
</FluentGrid>



<p>@(prevoditeljSetting?.PathInputFiles??"Nisam setovan")</p>

@code {
   

    static List<Option<string>> stringOptions1 = new()
    {
        { new Option<string> { Value = "1", Text = "Log Level 1", } },
        { new Option<string> { Value = "2", Text = "Log Level 2", } },
        { new Option<string> { Value = "3", Text = "Log Level 3" } },
        { new Option<string> { Value = "4", Text = "Log Level 4" } }, };
    FluentToolbar? Toolbar;
    bool serviceStarted = false;

    private EsirDriver.Modeli.PrevoditeljSettingModel? prevoditeljSetting { get; set; }

    string? logLevel = "Level 1";
    protected override void OnInitialized()
    {
        prevoditeljSetting = _engin.GetPrevoditeljConfig();
        Trace.WriteLine("Kakav si mi");
    }

    private void Erin(string ado)
    {

    }
    void startButtonCliced()

    {

      
        serviceStarted = !serviceStarted;

    }


    void OnBreakpointEnterHandler(GridItemSize size)
    {
        Console.WriteLine($"Page Size: {size}");
   
    }

    private void HandleOnMenuChanged(MenuChangeEventArgs args)
    {


    }

}